Prerequisites:
 -Tomcat 8
 -Java 8
----------------------------------------------------------------
Installation:

place MGOEndpoint.war into Tomcat webapps folder and restart tomcat.
----------------------------------------------------------------
Access endpoint at:

{tomcat_server}/MGOEndpoint/1.0/{resource}
----------------------------------------------------------------
Resource Info:

-=GET=-
status
 info: checks if database is up.
 parameters: None
 returns: JSON object of success if HSQLDB exists.


list_directory
 info: lists contents of a given passed in directory
 parameters: directory
 returns: JSON formatted list of directory/file paths within parameter


select_users
 info: selects users matching given parameters
 parameters: field, value, groupby
 returns: JSON formatted list of users matching the 'value' of 'field' grouped by the selected 'groupby' field.  See database section for possible fields.


-=POST=-
create_user
 info: creates user
 parameters: JSON formatted fname, lname, city, title, login, password
 returns: JSON success if user is created successfully


authenticate_user
 info: authenticates user
 parameters:JSON formatted login, password
 return: JSON success if user if validated


----------------------------------------------------------------
DATABASE:

Java based HSQLDB database.

Schema:

CREATE MEMORY TABLE PUBLIC.USER(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,FNAME VARCHAR(255),LNAME VARCHAR(255),CITY VARCHAR(255),TITLE VARCHAR(255),LOGIN VARCHAR(255) NOT NULL,PASSWORD VARCHAR(255),UNIQUE(LOGIN))

Note:
database will be created in tomcat base directory:
{tomcat_install}/database/
----------------------------------------------------------------
Tech Choices:

JAVA:  I have been doing quite a bit of Perl and Python for the past few years and had previous experience in Java and C#.  I have been moving back toward re-acclimating myself with Java lately; so I decided to do this project using it.

Jersey:  Jersey is a Java based JAX-RS rest implementation, and it seemed like the goto choice for Java REST implementations.

Tomcat:  Easy server for deploying WAR files for webapps.

HSQLDB:  I wanted to use a database that was self contained, easy to use, and easy to package and deploy.  I've found HSQLDB to be a great choice for projects such as this in the past.


Versioning:  
 I would simply have the version in the path as I have here (MGOEndpoint/1.0/)  That way I can keep old versions for compatibility, and add new ones as needed.

Pagination:
 In this example, the endpoints just return JSON, so I would probably try to handle any pagination with jquery.  Either that, or I would accept some sort of "result_count" parameter to limit the JSON to the requested amount.

----------------------------------------------------------------

Unit tests:
 Haven't done unit tests in Java in a long time and especially have not done them using REST endpoints.  I'm not 100% sure if I implemented them correctly.
 

